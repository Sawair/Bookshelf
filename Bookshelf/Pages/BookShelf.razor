@page "/books"
@using Bookshelf.Service
@using Bookshelf.ViewModel
@using Bookshelf.Components
@inherits SecurityPageBase

@inject BookService BookService
@inject UserService UserService

<div class="row p-3">
    <h3 class="col-2">BookShelf</h3>
    <button class="col-1 btn btn-primary" @onclick="AddBook">Add book</button>
</div>

<div>
    <table class="table">
        <thead>
            <tr>
                <th>Edit</th>
                <th>Borrow</th>
                <th>Title</th>
                <th>Tags</th>
                <th>Is e-book</th>
                <th>Is Available</th>
                <th>Borrowed by</th>
            </tr>
        </thead>

        @if (_books != null)
        {
            <tbody>
                @foreach (var book in _books)
                {
                    <tr>
                        <td><button class="btn-primary" @onclick="@(() => EditBook(book))">Edit</button></td>
                        @if (book.Borrower == null)
                        {
                            <td><button class="btn-primary" @onclick="@(async () => await BorrowBook(book))">Borrow</button></td>
                        }
                        else if (book.Borrower == _currentUserName)
                        {
                            <td><button class="btn-primary" @onclick="@(async () => await ReturnBook(book))">Return</button></td>
                        }
                        else
                        {
                            <td></td>
                        }
                        <td>@book.Title</td>
                        <td>@GetTags(book)</td>
                        <td>@book.IsEbook</td>
                        <td>@book.Available</td>
                        <td>@book.Borrower</td>
                    </tr>
                }
            </tbody>
        }
    </table>
</div>

<BookComponent Display="@_showAddBook" OnSave="@SaveBook" Book="@_book" Title="@_title" />

@code {

    private bool _showAddBook;
    private BookViewModel _book;
    private string _currentUserName;
    private BookViewModel[] _books;
    private string _title;

    protected override async Task OnInitializedAsync()
    {
        _showAddBook = false;
        _currentUserName = UserService.GetCurrentUser().UserName;
        await LoadBooks();
    }

    private async Task LoadBooks()
    {
        _books = await BookService.GetBookViewModelsAsync();
    }

    private void AddBook()
    {
        _title = "Add book";
        _book = new BookViewModel();
        _showAddBook = true;
    }

    private void EditBook(BookViewModel book)
    {
        _title = "Edit book";
        _book = book;
        _showAddBook = true;
    }

    private async Task BorrowBook(BookViewModel book)
    {
        book.Borrower = _currentUserName;
        await SaveBook(book);
    }

    private async Task ReturnBook(BookViewModel book)
    {
        book.Borrower = string.Empty;
        await SaveBook(book);
    }

    private string GetTags(BookViewModel book)
    {
        var tags = "";
        foreach (var tag in book.Tags)
        {
            tags += $"{tag}, ";
        }
        return tags.TrimEnd(' ').TrimEnd(',');
    }

    public async Task SaveBook(BookViewModel book)
    {
        await BookService.SaveBookViewModel(book);
        await LoadBooks();
        _showAddBook = false;
    }
}
